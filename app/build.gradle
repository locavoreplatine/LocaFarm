apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

apply from: '../sonar.gradle'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "locavoreplatine.locafarm"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }


    }
    buildTypes {
        buildTypes {

            debug {
                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                manifestPlaceholders = [ google_map_api_key:'"'+properties.getProperty('googlemapapikey')+'"']

                testCoverageEnabled true

                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }

            release {
                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                manifestPlaceholders = [ google_map_api_key:'"'+properties.getProperty('googlemapapikey')+'"']

                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }

        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

project.ext {
    appcompat = "27.0.2"
    room = "1.0.0"
    maps = "11.4.2"
    retrofit = "2.3.0"
    constraintLayout = "1.0.2"
    mvvm = "1.1.0"
    anko_version = "0.10.3"
    maps = "11.8.0"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Android
    implementation "com.android.support:appcompat-v7:$appcompat"
    implementation "com.android.support:cardview-v7:$appcompat"
    implementation "com.android.support:design:$appcompat"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:support-v4:$appcompat"

    // Junit
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.1'

    // MVVM
    implementation "android.arch.lifecycle:extensions:$mvvm"
    testImplementation "android.arch.core:core-testing:$mvvm"

    // Room
    implementation "android.arch.persistence.room:runtime:$room"
    kapt "android.arch.persistence.room:compiler:$room"
    testImplementation "android.arch.persistence.room:testing:$room"
    implementation "android.arch.paging:runtime:1.0.0-alpha4-1"
    testImplementation "android.arch.core:core-testing:$room"
    testImplementation "android.arch.persistence.room:testing:$room"
    implementation "android.arch.lifecycle:common-java8:$room"
    implementation "android.arch.persistence.room:rxjava2:$room"
    implementation 'android.arch.lifecycle:reactivestreams:1.1.0'

    //shortcut
    implementation 'com.github.matthiasrobbers:shortbread:1.0.2'
    kapt 'com.github.matthiasrobbers:shortbread-compiler:1.0.2'

    //Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-design:$anko_version"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // SearchView
    implementation 'com.github.arimorty:floatingsearchview:2.1.1'

    // Google Maps
    implementation "com.google.android.gms:play-services-maps:$maps"
    implementation "com.google.android.gms:play-services-location:$maps"

    // RxLocation
    implementation 'pl.charmas.android:android-reactive-location2:2.1@aar'

    // Easy permission
    implementation 'pub.devrel:easypermissions:1.0.1'

    //Testing
    androidTestUtil 'com.android.support.test:orchestrator:1.0.2-alpha1'
    testImplementation 'org.robolectric:robolectric:3.7.1'
}


jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/reports")

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled = true
    xml.destination file("${buildDir}/reports/jacocoTestReport.xml")
    html.destination file("${buildDir}/reports/jacoco")
    csv.destination file("${buildDir}/reports/jacocoTestReport.csv")
    }

    def fileFilter = [
            '**/*Parcel.class',
            '**/*$CREATOR.class',
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '**/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/androidTest/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree],[kotlinDebugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}