package locavoreplatine.locafarm.view.activity

import android.Manifest
import android.annotation.SuppressLint
import android.os.Bundle
import android.support.v4.app.ActivityCompat
import android.support.v4.app.Fragment
import android.support.v7.app.AlertDialog
import android.support.v7.app.AppCompatActivity
import kotlinx.android.synthetic.main.activity_main_content.*
import locavoreplatine.locafarm.R
import locavoreplatine.locafarm.util.replaceFragment
import locavoreplatine.locafarm.view.fragment.FavFragment
import locavoreplatine.locafarm.view.fragment.FinderFragment
import org.jetbrains.anko.AnkoLogger
import org.jetbrains.anko.info
import permissions.dispatcher.NeedsPermission
import permissions.dispatcher.OnShowRationale
import permissions.dispatcher.PermissionRequest
import permissions.dispatcher.RuntimePermissions


@RuntimePermissions
class MainActivity : AppCompatActivity(), AnkoLogger {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        activity_main_bottom_nav_view.inflateMenu(R.menu.activity_main_bottom_menu)
        activity_main_bottom_nav_view.setOnNavigationItemSelectedListener {
            val fragment: Fragment
            when(it.itemId){
                R.id.activity_main_bottom_menu_fav -> {
                    fragment = FavFragment()
                    val bundle = Bundle()
                    //TODO replace with real userId when available
                    bundle.putLong("userId",0)
                    fragment.arguments=bundle
                }
                else -> {
                    fragment = FinderFragment()
                    val bundle = Bundle()
                    //TODO replace with real userId when available
                    bundle.putLong("userId",0)
                    fragment.arguments=bundle
                }
            }
            replaceFragment(fragment,activity_main_fragment_container.id)
            true
        }
        activity_main_bottom_nav_view.setOnNavigationItemReselectedListener {
            val fragment: Fragment
            when(it.itemId){
                R.id.activity_main_bottom_menu_fav -> {
                    fragment = FavFragment()
                    val bundle = Bundle()
                    //TODO replace with real userId when available
                    bundle.putLong("userId",0)
                    fragment.arguments=bundle
                }
                else -> {
                    fragment = FinderFragment()
                    val bundle = Bundle()
                    //TODO replace with real userId when available
                    bundle.putLong("userId",0)
                    fragment.arguments=bundle
                }
            }
            replaceFragment(fragment,activity_main_fragment_container.id)
        }

        val fragment = FinderFragment()
        val bundle = Bundle()
        //TODO replace with real userId when available
        bundle.putLong("userId",0)
        fragment.arguments=bundle
        replaceFragment(fragment, activity_main_fragment_container.id)

        // AutoGenerated
        permissionCheckWithPermissionCheck()
    }

    @NeedsPermission(Manifest.permission.ACCESS_FINE_LOCATION,Manifest.permission.ACCESS_COARSE_LOCATION)
    fun permissionCheck() {
        info("Demande de permissions ")
    }

    @OnShowRationale(Manifest.permission.ACCESS_COARSE_LOCATION)
    fun AlertCoarse(request: PermissionRequest) {
        val alertdialog = AlertDialog.Builder(this).create()
        alertdialog.setTitle("Permission Access_Coarse_Location")
        alertdialog.setMessage("Cette permission est nécessaire pour prendre la géolocalisation et au bon fonctionnement de l'application")
        alertdialog.setButton(AlertDialog.BUTTON_NEGATIVE, "non") { dialog, which ->
            dialog.dismiss()
            finish()
        }
        alertdialog.setButton(AlertDialog.BUTTON_POSITIVE, "ok ") { dialog, which ->
            dialog.dismiss()
            ActivityCompat.requestPermissions(this@MainActivity, arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION), MainActivity.REQUEST_CODE_COARSE_LOCATION)
        }
        alertdialog.show()
    }

    @OnShowRationale(Manifest.permission.ACCESS_FINE_LOCATION)
    fun AlertFine(request: PermissionRequest) {
        val alertdialog = AlertDialog.Builder(this).create()
        alertdialog.setTitle("Permission Access_Fine_Location")
        alertdialog.setMessage("Cette permission est nécessaire pour prendre la géolocalisation et au bon fonctionnement de l'application")
        alertdialog.setButton(AlertDialog.BUTTON_NEGATIVE, "non") { dialog, which ->
            dialog.dismiss()
            finish()
        }
        alertdialog.setButton(AlertDialog.BUTTON_POSITIVE, "ok ") { dialog, which ->
            dialog.dismiss()
            ActivityCompat.requestPermissions(this@MainActivity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), MainActivity.REQUEST_CODE_FINE_LOCATION)
        }
        alertdialog.show()
    }

    @SuppressLint("NeedOnRequestPermissionsResult")
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        // NOTE: delegate the permission handling to generated method
        onRequestPermissionsResult(requestCode, grantResults)
    }


    companion object {

        const val MY_PREFS_NAME = "MyPrefsFile"
        private const val REQUEST_CODE_FINE_LOCATION = 101
        private const val REQUEST_CODE_COARSE_LOCATION = 102
    }




}
